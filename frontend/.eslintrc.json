{
  "extends": [
    "plugin:eslint-comments/recommended",
    "plugin:import/typescript",
    "plugin:react-perf/recommended",
    "airbnb",
    "airbnb-typescript",
    "plugin:@next/next/recommended",
    "next/core-web-vitals",
    // "next",
    "prettier"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./frontend/tsconfig.json"
  },
  "plugins": [
    "@typescript-eslint",
    "simple-import-sort",
    "unused-imports",
    "react-perf",
    "eslint-plugin-no-inline-styles",
    "testing-library",
    "jest-dom"
  ],
  "rules": {
    // React rules
    "react/require-default-props": "off",
    "react/jsx-props-no-spreading": "off",
    "react-perf/jsx-no-new-object-as-prop": "warn",
    "react-perf/jsx-no-new-array-as-prop": "warn",
    "no-inline-styles/no-inline-styles": "error",

    // eslint rules
    // "eslint-comments/no-use": ["warn", { "allow": [] }],
    "eslint-comments/require-description": [
      "error",
      { "ignore": ["eslint-enable"] }
    ],
    // "no-console": "off", // All consoles are automatically removed in production

    // import rules
    "import/extensions": ["warn", "ignorePackages"],
    "import/prefer-default-export": "off",
    "import/no-default-export": "error",
    "simple-import-sort/imports": "warn",
    "simple-import-sort/exports": "warn",
    "import/first": "warn",
    "import/newline-after-import": "warn",
    "import/no-duplicates": "error",
    "import/no-cycle": "error",
    "unused-imports/no-unused-imports": "warn",
    "no-unused-vars": "off", // We use unused-imports/no-unused-vars instead
    "@typescript-eslint/no-unused-vars": "off", // We use unused-imports/no-unused-vars instead
    "unused-imports/no-unused-vars": [
      "warn",
      {
        "vars": "all",
        "args": "after-used",
        "argsIgnorePattern": "^_"
      }
    ],
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": [
          "tests/**",
          "**/*.test.{ts,tsx}",
          "**/*.spec.{ts,tsx}",
          "**/test-*.{js,jsx,ts,tsx}",
          "**/stories.{ts,tsx}",
          "**/*.stories.{ts,tsx}",
          "**/*/stories.{ts,tsx}",
          "**/*.d.ts"
        ]
      }
    ],

    // typescript rules
    "padding-line-between-statements": "off",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "default",
        "format": ["camelCase", "PascalCase", "UPPER_CASE"]
      },
      {
        "selector": "objectLiteralProperty",
        "format": null,
        "leadingUnderscore": "allow",
        "trailingUnderscore": "allow"
      },
      {
        "selector": "interface",
        "format": ["PascalCase", "UPPER_CASE"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "allow"
      },
      {
        "selector": "typeProperty",
        "format": null,
        "leadingUnderscore": "allow",
        "trailingUnderscore": "allow"
      },
      {
        "selector": "interface",
        "format": ["PascalCase"],
        "custom": {
          "regex": "^I[A-Z]",
          "match": false
        }
      }
    ],
    "@typescript-eslint/padding-line-between-statements": [
      "warn",
      {
        "blankLine": "always",
        "prev": "*",
        "next": "block"
      },
      {
        "blankLine": "always",
        "prev": "block",
        "next": "*"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": "block-like"
      },
      {
        "blankLine": "always",
        "prev": "block-like",
        "next": "*"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": "return"
      },
      {
        "blankLine": "always",
        "prev": "case",
        "next": "*"
      },
      {
        "blankLine": "always",
        "prev": "*",
        "next": ["interface", "type"]
      },
      {
        "blankLine": "always",
        "prev": ["interface", "type"],
        "next": "*"
      }
    ]
  },
  "ignorePatterns": ["**/*.json", "**/*.js"],
  "overrides": [
    {
      "files": ["*/src/**/*", "__tests__/**/*"],
      "rules": {
        "simple-import-sort/imports": [
          "warn",
          {
            "groups": [
              // Node.js builtins. You could also generate this regex if you use a `.js` config.
              // For example: `^(${require("module").builtinModules.join("|")})(/|$)`
              [
                "^(assert|buffer|child_process|cluster|console|constants|crypto|dgram|dns|domain|events|fs|http|https|module|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|sys|timers|tls|tty|url|util|vm|zlib|freelist|v8|process|async_hooks|http2|perf_hooks)(/.*|$)"
              ],
              // Packages. `react` related packages come first.
              ["^next", "^react$", "^@chakra", "^react", "^@?\\w"],
              // Internal packages.
              ["^(@/)(/.*|$|..)"],
              // Side effect imports.
              ["^\\u0000"],
              // Parent imports. Put `..` last.
              ["^\\.\\.(?!/?$)", "^\\.\\./?$"],
              // Other relative imports. Put same-folder imports and `.` last.
              ["^\\./(?=.*/)(?!/?$)", "^\\.(?!/?$)", "^\\./?$"],
              // Style imports.
              ["@styles", "^.+\\.s?css$"]
            ]
          }
        ]
      }
    },
    {
      "files": ["*/pages/**/*", "middleware.ts", "app/**/*"],
      "rules": {
        "import/no-default-export": "off",
        "react/function-component-definition": "off"
      }
    },
    {
      "files": ["plopfile.js", "plopfile.mjs"],
      "rules": {
        "import/no-default-export": "off",
        "react/function-component-definition": "off",
        "import/no-anonymous-default-export": "off",
        "func-names": "off"
      }
    },
    {
      "files": ["*/_dev-tools/**/*"],
      "rules": {
        "import/no-extraneous-dependencies": "off"
      }
    }
  ]
}
